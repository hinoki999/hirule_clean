import pytest
from decimal import Decimal
from datetime import datetime
import asyncio

from src.agents.trading.messages import TradingMessageTypes
from src.agents.trading.market_regime import MarketState

@pytest.mark.asyncio
async def test_threshold_adjustment(trading_agent):
    """Test threshold adjustment based on market regime."""
    symbol = "BTC/USD"
    trade_size = Decimal("1000.0")
    base_price = 50000.0

    # Simulate sufficient market data to trigger regime detection
    for _ in range(trading_agent.trading_thresholds.config.vol_window):
        await trading_agent.process_message({
            "type": TradingMessageTypes.MARKET_DATA.value,
            "payload": {
                "symbol": symbol,
                "last_price": base_price,
                "volume": 1000.0,
                "cost": 0.001,
                "timestamp": datetime.now().isoformat()
            }
        })

    await asyncio.sleep(0.1)

    threshold, size_mult = trading_agent.smart_trading_thresholds.calculate_thresholds_and_sizing(symbol, trade_size, base_price)

    expected_threshold_normal_vol = 0.0010558323628501356  # Adjust if formula changes
    assert threshold == pytest.approx(expected_threshold_normal_vol, rel=1e-4), (
        f"Expected threshold_normal_vol ({expected_threshold_normal_vol}) to be approximately {threshold}")

    # Simulate high volatility
    trading_agent.market_regime_detector.current_regimes[symbol] = MarketState(
        volatility_regime="high",
        liquidity_state="good",
        trend_strength=0.6,
        mean_reversion_score=0.4
    )
    trading_agent.market_regime_detector.confidence_scores[symbol] = 0.9

    threshold_high_vol, size_mult_high_vol = trading_agent.smart_trading_thresholds.calculate_thresholds_and_sizing(symbol, trade_size, base_price)

    assert size_mult_high_vol < 0.7, f"Expected size_mult_high_vol to be less than 0.7, got {size_mult_high_vol}"
